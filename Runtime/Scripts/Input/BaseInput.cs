//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Packages/com.ath.grid-building-system/Runtime/Scripts/Input/BaseInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @BaseInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @BaseInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""BaseInput"",
    ""maps"": [
        {
            ""name"": ""CameraController"",
            ""id"": ""0f85ec3c-f634-44b3-b21a-9a9caef159d6"",
            ""actions"": [
                {
                    ""name"": ""Zoom"",
                    ""type"": ""Value"",
                    ""id"": ""c0ed47cc-040e-4863-8e8a-ab0043696421"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": ""Clamp(min=-1,max=1)"",
                    ""interactions"": ""SlowTap"",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pan"",
                    ""type"": ""Value"",
                    ""id"": ""040265ee-ef8d-4a31-b5f6-1158d82fa426"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnableRotate"",
                    ""type"": ""Button"",
                    ""id"": ""6151c40c-7187-49f1-8773-de61edb722fe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotation"",
                    ""type"": ""Value"",
                    ""id"": ""fdc6070e-c66e-43b1-a815-6486dbe63c0d"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""EnableCameraController"",
                    ""type"": ""Button"",
                    ""id"": ""a0050abc-5e19-4ca7-81ac-988ffb63f19d"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""VericalPan"",
                    ""type"": ""Value"",
                    ""id"": ""8009bb77-9537-4d16-97c7-36ddab64572c"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""039847ca-09ce-46be-b945-d494e3c0e6be"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Zoom"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""82e33f3e-7786-43fa-b0be-0554323fadf9"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""EnableRotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""WASD"",
                    ""id"": ""c192fed1-a725-44ec-b1f3-f9ff9a6dfea0"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""fc57b6cd-d697-4725-ad50-a35945be0e8a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""3eb3c7fe-17e5-4516-9ac2-a3543a6b69b2"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""edffac3f-bd77-4d78-87a9-df487164b6d0"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""0ee30925-c5b7-408d-93c4-95d5b14af590"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Main"",
                    ""action"": ""Pan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""8f78c87b-f5b9-458e-a830-3c9d088020f4"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotation"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""193b9a1b-bb04-4e94-a3d2-8382c0a23ea8"",
                    ""path"": ""<Keyboard>/backquote"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""EnableCameraController"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""1D Axis"",
                    ""id"": ""7f7dd5be-53a3-4c0a-b4c2-0c6dbeb13418"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VericalPan"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""8d607292-2cc0-45ad-8921-6ef687203867"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VericalPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""1a28b720-1599-42b5-aef1-dcccf4fbc26f"",
                    ""path"": ""<Keyboard>/q"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""VericalPan"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                }
            ]
        },
        {
            ""name"": ""BuildingEditing"",
            ""id"": ""fa0f06ac-be37-44d0-9088-08f0ed844b5d"",
            ""actions"": [
                {
                    ""name"": ""SelectUpperCell"",
                    ""type"": ""Button"",
                    ""id"": ""bbe00b85-020d-4442-9f8c-beddddb42fa8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectRightCell"",
                    ""type"": ""Button"",
                    ""id"": ""571c9821-39d2-4659-a987-5500c76f3c39"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectLowerCell"",
                    ""type"": ""Button"",
                    ""id"": ""f379e0e3-1daa-4f24-9a52-5165af25dea4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectLeftCell"",
                    ""type"": ""Button"",
                    ""id"": ""0e2dca9e-c36f-4fb1-8460-39291e093d86"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SelectNextAttachment"",
                    ""type"": ""Value"",
                    ""id"": ""31b482a5-a4d4-46aa-9f37-c29df9bca2b8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectPervoiusAttachment"",
                    ""type"": ""Button"",
                    ""id"": ""8b22a7c4-f6c5-4aec-b88c-884eb6201c9e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Rotate"",
                    ""type"": ""Button"",
                    ""id"": ""8640ed5c-f1ed-4356-af0d-0ccf7d0ecb7e"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Construct"",
                    ""type"": ""Button"",
                    ""id"": ""ecddc434-29a0-4379-9562-ee29c0860214"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""218c53f8-d846-4e3f-a743-ddfae7aa23e5"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""c6183d50-125d-4e63-9756-726fadff1c31"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectUpperCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d31e25c3-eff7-43e0-931b-a1a720f03cb2"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectRightCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""99f26fa8-5892-4d8a-8c6b-4b4ddb3eee0e"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLowerCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b0c79c3b-ab46-49c4-a629-59c3f5a447e8"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectLeftCell"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dd22e2de-55e2-48fc-85bd-0ad6af71f677"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectNextAttachment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""10d2e705-10ac-47d3-95df-93ff71afd077"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPervoiusAttachment"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c20ac591-092d-452d-a81a-fb03b9a91618"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Rotate"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9b03cf59-f926-4b5b-b1e8-7eddff38053f"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Construct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d0414a92-025d-41fd-800b-1847d87f18fe"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Construct"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df8b533d-ecce-48f4-a639-aeeebb396946"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UINavigation"",
            ""id"": ""77e281e8-98ba-4f71-8701-65a2c2b35313"",
            ""actions"": [
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""9f61c810-72d7-4ecf-b496-a43c8ebca81a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""0db72f9a-35d7-4702-aee1-54a269295ead"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""f8957435-00c1-4474-ad7d-ff0f7c2707c4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""a64c8bdf-e40e-45ff-8c39-cff0e93005b3"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Select"",
                    ""type"": ""Button"",
                    ""id"": ""909c8a71-9726-4f23-a26f-7c7b61bd0a39"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a83867b-fa82-40cf-805e-913fb70ad6a3"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8d87cba-ccf7-4fd4-b5d0-4ed6c99238ed"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3595b7ff-b05d-48df-a3c5-f6019aef9859"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5e885f0e-edbe-413c-9b4e-b24d44997a3f"",
                    ""path"": ""<Keyboard>/enter"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Select"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""035b5f9a-a766-47e7-af0c-dd0819d304fa"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Main"",
            ""bindingGroup"": ""Main"",
            ""devices"": []
        }
    ]
}");
        // CameraController
        m_CameraController = asset.FindActionMap("CameraController", throwIfNotFound: true);
        m_CameraController_Zoom = m_CameraController.FindAction("Zoom", throwIfNotFound: true);
        m_CameraController_Pan = m_CameraController.FindAction("Pan", throwIfNotFound: true);
        m_CameraController_EnableRotate = m_CameraController.FindAction("EnableRotate", throwIfNotFound: true);
        m_CameraController_Rotation = m_CameraController.FindAction("Rotation", throwIfNotFound: true);
        m_CameraController_EnableCameraController = m_CameraController.FindAction("EnableCameraController", throwIfNotFound: true);
        m_CameraController_VericalPan = m_CameraController.FindAction("VericalPan", throwIfNotFound: true);
        // BuildingEditing
        m_BuildingEditing = asset.FindActionMap("BuildingEditing", throwIfNotFound: true);
        m_BuildingEditing_SelectUpperCell = m_BuildingEditing.FindAction("SelectUpperCell", throwIfNotFound: true);
        m_BuildingEditing_SelectRightCell = m_BuildingEditing.FindAction("SelectRightCell", throwIfNotFound: true);
        m_BuildingEditing_SelectLowerCell = m_BuildingEditing.FindAction("SelectLowerCell", throwIfNotFound: true);
        m_BuildingEditing_SelectLeftCell = m_BuildingEditing.FindAction("SelectLeftCell", throwIfNotFound: true);
        m_BuildingEditing_SelectNextAttachment = m_BuildingEditing.FindAction("SelectNextAttachment", throwIfNotFound: true);
        m_BuildingEditing_SelectPervoiusAttachment = m_BuildingEditing.FindAction("SelectPervoiusAttachment", throwIfNotFound: true);
        m_BuildingEditing_Rotate = m_BuildingEditing.FindAction("Rotate", throwIfNotFound: true);
        m_BuildingEditing_Construct = m_BuildingEditing.FindAction("Construct", throwIfNotFound: true);
        m_BuildingEditing_MousePosition = m_BuildingEditing.FindAction("MousePosition", throwIfNotFound: true);
        // UINavigation
        m_UINavigation = asset.FindActionMap("UINavigation", throwIfNotFound: true);
        m_UINavigation_Right = m_UINavigation.FindAction("Right", throwIfNotFound: true);
        m_UINavigation_Left = m_UINavigation.FindAction("Left", throwIfNotFound: true);
        m_UINavigation_Up = m_UINavigation.FindAction("Up", throwIfNotFound: true);
        m_UINavigation_Down = m_UINavigation.FindAction("Down", throwIfNotFound: true);
        m_UINavigation_Select = m_UINavigation.FindAction("Select", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CameraController
    private readonly InputActionMap m_CameraController;
    private ICameraControllerActions m_CameraControllerActionsCallbackInterface;
    private readonly InputAction m_CameraController_Zoom;
    private readonly InputAction m_CameraController_Pan;
    private readonly InputAction m_CameraController_EnableRotate;
    private readonly InputAction m_CameraController_Rotation;
    private readonly InputAction m_CameraController_EnableCameraController;
    private readonly InputAction m_CameraController_VericalPan;
    public struct CameraControllerActions
    {
        private @BaseInput m_Wrapper;
        public CameraControllerActions(@BaseInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Zoom => m_Wrapper.m_CameraController_Zoom;
        public InputAction @Pan => m_Wrapper.m_CameraController_Pan;
        public InputAction @EnableRotate => m_Wrapper.m_CameraController_EnableRotate;
        public InputAction @Rotation => m_Wrapper.m_CameraController_Rotation;
        public InputAction @EnableCameraController => m_Wrapper.m_CameraController_EnableCameraController;
        public InputAction @VericalPan => m_Wrapper.m_CameraController_VericalPan;
        public InputActionMap Get() { return m_Wrapper.m_CameraController; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraControllerActions set) { return set.Get(); }
        public void SetCallbacks(ICameraControllerActions instance)
        {
            if (m_Wrapper.m_CameraControllerActionsCallbackInterface != null)
            {
                @Zoom.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnZoom;
                @Zoom.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnZoom;
                @Zoom.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnZoom;
                @Pan.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnPan;
                @Pan.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnPan;
                @Pan.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnPan;
                @EnableRotate.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnEnableRotate;
                @EnableRotate.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnEnableRotate;
                @EnableRotate.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnEnableRotate;
                @Rotation.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnRotation;
                @Rotation.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnRotation;
                @Rotation.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnRotation;
                @EnableCameraController.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnEnableCameraController;
                @EnableCameraController.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnEnableCameraController;
                @EnableCameraController.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnEnableCameraController;
                @VericalPan.started -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnVericalPan;
                @VericalPan.performed -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnVericalPan;
                @VericalPan.canceled -= m_Wrapper.m_CameraControllerActionsCallbackInterface.OnVericalPan;
            }
            m_Wrapper.m_CameraControllerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Zoom.started += instance.OnZoom;
                @Zoom.performed += instance.OnZoom;
                @Zoom.canceled += instance.OnZoom;
                @Pan.started += instance.OnPan;
                @Pan.performed += instance.OnPan;
                @Pan.canceled += instance.OnPan;
                @EnableRotate.started += instance.OnEnableRotate;
                @EnableRotate.performed += instance.OnEnableRotate;
                @EnableRotate.canceled += instance.OnEnableRotate;
                @Rotation.started += instance.OnRotation;
                @Rotation.performed += instance.OnRotation;
                @Rotation.canceled += instance.OnRotation;
                @EnableCameraController.started += instance.OnEnableCameraController;
                @EnableCameraController.performed += instance.OnEnableCameraController;
                @EnableCameraController.canceled += instance.OnEnableCameraController;
                @VericalPan.started += instance.OnVericalPan;
                @VericalPan.performed += instance.OnVericalPan;
                @VericalPan.canceled += instance.OnVericalPan;
            }
        }
    }
    public CameraControllerActions @CameraController => new CameraControllerActions(this);

    // BuildingEditing
    private readonly InputActionMap m_BuildingEditing;
    private IBuildingEditingActions m_BuildingEditingActionsCallbackInterface;
    private readonly InputAction m_BuildingEditing_SelectUpperCell;
    private readonly InputAction m_BuildingEditing_SelectRightCell;
    private readonly InputAction m_BuildingEditing_SelectLowerCell;
    private readonly InputAction m_BuildingEditing_SelectLeftCell;
    private readonly InputAction m_BuildingEditing_SelectNextAttachment;
    private readonly InputAction m_BuildingEditing_SelectPervoiusAttachment;
    private readonly InputAction m_BuildingEditing_Rotate;
    private readonly InputAction m_BuildingEditing_Construct;
    private readonly InputAction m_BuildingEditing_MousePosition;
    public struct BuildingEditingActions
    {
        private @BaseInput m_Wrapper;
        public BuildingEditingActions(@BaseInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectUpperCell => m_Wrapper.m_BuildingEditing_SelectUpperCell;
        public InputAction @SelectRightCell => m_Wrapper.m_BuildingEditing_SelectRightCell;
        public InputAction @SelectLowerCell => m_Wrapper.m_BuildingEditing_SelectLowerCell;
        public InputAction @SelectLeftCell => m_Wrapper.m_BuildingEditing_SelectLeftCell;
        public InputAction @SelectNextAttachment => m_Wrapper.m_BuildingEditing_SelectNextAttachment;
        public InputAction @SelectPervoiusAttachment => m_Wrapper.m_BuildingEditing_SelectPervoiusAttachment;
        public InputAction @Rotate => m_Wrapper.m_BuildingEditing_Rotate;
        public InputAction @Construct => m_Wrapper.m_BuildingEditing_Construct;
        public InputAction @MousePosition => m_Wrapper.m_BuildingEditing_MousePosition;
        public InputActionMap Get() { return m_Wrapper.m_BuildingEditing; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(BuildingEditingActions set) { return set.Get(); }
        public void SetCallbacks(IBuildingEditingActions instance)
        {
            if (m_Wrapper.m_BuildingEditingActionsCallbackInterface != null)
            {
                @SelectUpperCell.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectUpperCell;
                @SelectUpperCell.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectUpperCell;
                @SelectUpperCell.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectUpperCell;
                @SelectRightCell.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectRightCell;
                @SelectRightCell.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectRightCell;
                @SelectRightCell.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectRightCell;
                @SelectLowerCell.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectLowerCell;
                @SelectLowerCell.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectLowerCell;
                @SelectLowerCell.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectLowerCell;
                @SelectLeftCell.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectLeftCell;
                @SelectLeftCell.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectLeftCell;
                @SelectLeftCell.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectLeftCell;
                @SelectNextAttachment.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectNextAttachment;
                @SelectNextAttachment.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectNextAttachment;
                @SelectNextAttachment.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectNextAttachment;
                @SelectPervoiusAttachment.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectPervoiusAttachment;
                @SelectPervoiusAttachment.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectPervoiusAttachment;
                @SelectPervoiusAttachment.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnSelectPervoiusAttachment;
                @Rotate.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnRotate;
                @Rotate.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnRotate;
                @Rotate.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnRotate;
                @Construct.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnConstruct;
                @Construct.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnConstruct;
                @Construct.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnConstruct;
                @MousePosition.started -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnMousePosition;
                @MousePosition.performed -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnMousePosition;
                @MousePosition.canceled -= m_Wrapper.m_BuildingEditingActionsCallbackInterface.OnMousePosition;
            }
            m_Wrapper.m_BuildingEditingActionsCallbackInterface = instance;
            if (instance != null)
            {
                @SelectUpperCell.started += instance.OnSelectUpperCell;
                @SelectUpperCell.performed += instance.OnSelectUpperCell;
                @SelectUpperCell.canceled += instance.OnSelectUpperCell;
                @SelectRightCell.started += instance.OnSelectRightCell;
                @SelectRightCell.performed += instance.OnSelectRightCell;
                @SelectRightCell.canceled += instance.OnSelectRightCell;
                @SelectLowerCell.started += instance.OnSelectLowerCell;
                @SelectLowerCell.performed += instance.OnSelectLowerCell;
                @SelectLowerCell.canceled += instance.OnSelectLowerCell;
                @SelectLeftCell.started += instance.OnSelectLeftCell;
                @SelectLeftCell.performed += instance.OnSelectLeftCell;
                @SelectLeftCell.canceled += instance.OnSelectLeftCell;
                @SelectNextAttachment.started += instance.OnSelectNextAttachment;
                @SelectNextAttachment.performed += instance.OnSelectNextAttachment;
                @SelectNextAttachment.canceled += instance.OnSelectNextAttachment;
                @SelectPervoiusAttachment.started += instance.OnSelectPervoiusAttachment;
                @SelectPervoiusAttachment.performed += instance.OnSelectPervoiusAttachment;
                @SelectPervoiusAttachment.canceled += instance.OnSelectPervoiusAttachment;
                @Rotate.started += instance.OnRotate;
                @Rotate.performed += instance.OnRotate;
                @Rotate.canceled += instance.OnRotate;
                @Construct.started += instance.OnConstruct;
                @Construct.performed += instance.OnConstruct;
                @Construct.canceled += instance.OnConstruct;
                @MousePosition.started += instance.OnMousePosition;
                @MousePosition.performed += instance.OnMousePosition;
                @MousePosition.canceled += instance.OnMousePosition;
            }
        }
    }
    public BuildingEditingActions @BuildingEditing => new BuildingEditingActions(this);

    // UINavigation
    private readonly InputActionMap m_UINavigation;
    private IUINavigationActions m_UINavigationActionsCallbackInterface;
    private readonly InputAction m_UINavigation_Right;
    private readonly InputAction m_UINavigation_Left;
    private readonly InputAction m_UINavigation_Up;
    private readonly InputAction m_UINavigation_Down;
    private readonly InputAction m_UINavigation_Select;
    public struct UINavigationActions
    {
        private @BaseInput m_Wrapper;
        public UINavigationActions(@BaseInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @Right => m_Wrapper.m_UINavigation_Right;
        public InputAction @Left => m_Wrapper.m_UINavigation_Left;
        public InputAction @Up => m_Wrapper.m_UINavigation_Up;
        public InputAction @Down => m_Wrapper.m_UINavigation_Down;
        public InputAction @Select => m_Wrapper.m_UINavigation_Select;
        public InputActionMap Get() { return m_Wrapper.m_UINavigation; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UINavigationActions set) { return set.Get(); }
        public void SetCallbacks(IUINavigationActions instance)
        {
            if (m_Wrapper.m_UINavigationActionsCallbackInterface != null)
            {
                @Right.started -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnRight;
                @Right.performed -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnRight;
                @Right.canceled -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnRight;
                @Left.started -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnLeft;
                @Left.performed -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnLeft;
                @Left.canceled -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnLeft;
                @Up.started -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnUp;
                @Up.performed -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnUp;
                @Up.canceled -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnUp;
                @Down.started -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnDown;
                @Down.performed -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnDown;
                @Down.canceled -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnDown;
                @Select.started -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnSelect;
                @Select.performed -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnSelect;
                @Select.canceled -= m_Wrapper.m_UINavigationActionsCallbackInterface.OnSelect;
            }
            m_Wrapper.m_UINavigationActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Right.started += instance.OnRight;
                @Right.performed += instance.OnRight;
                @Right.canceled += instance.OnRight;
                @Left.started += instance.OnLeft;
                @Left.performed += instance.OnLeft;
                @Left.canceled += instance.OnLeft;
                @Up.started += instance.OnUp;
                @Up.performed += instance.OnUp;
                @Up.canceled += instance.OnUp;
                @Down.started += instance.OnDown;
                @Down.performed += instance.OnDown;
                @Down.canceled += instance.OnDown;
                @Select.started += instance.OnSelect;
                @Select.performed += instance.OnSelect;
                @Select.canceled += instance.OnSelect;
            }
        }
    }
    public UINavigationActions @UINavigation => new UINavigationActions(this);
    private int m_MainSchemeIndex = -1;
    public InputControlScheme MainScheme
    {
        get
        {
            if (m_MainSchemeIndex == -1) m_MainSchemeIndex = asset.FindControlSchemeIndex("Main");
            return asset.controlSchemes[m_MainSchemeIndex];
        }
    }
    public interface ICameraControllerActions
    {
        void OnZoom(InputAction.CallbackContext context);
        void OnPan(InputAction.CallbackContext context);
        void OnEnableRotate(InputAction.CallbackContext context);
        void OnRotation(InputAction.CallbackContext context);
        void OnEnableCameraController(InputAction.CallbackContext context);
        void OnVericalPan(InputAction.CallbackContext context);
    }
    public interface IBuildingEditingActions
    {
        void OnSelectUpperCell(InputAction.CallbackContext context);
        void OnSelectRightCell(InputAction.CallbackContext context);
        void OnSelectLowerCell(InputAction.CallbackContext context);
        void OnSelectLeftCell(InputAction.CallbackContext context);
        void OnSelectNextAttachment(InputAction.CallbackContext context);
        void OnSelectPervoiusAttachment(InputAction.CallbackContext context);
        void OnRotate(InputAction.CallbackContext context);
        void OnConstruct(InputAction.CallbackContext context);
        void OnMousePosition(InputAction.CallbackContext context);
    }
    public interface IUINavigationActions
    {
        void OnRight(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnSelect(InputAction.CallbackContext context);
    }
}
